-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([st, w], stmt) {
  case stmt of
      Assn (v, expr) -> [st <- [v, evalExpr (st, expr)], w]
    | Seq (a, b) -> eval(eval([st, w], a), b)
    | Skip -> [st, w]
    | Read (x) ->
      case readWorld(w) of
        [n, nw] -> [st <- [x, n], nw]
      esac
    | Write (e) -> [st, writeWorld(evalExpr(st, e), w)]
    | If (e, s1, s2) ->
      case evalExpr(st, e) of
          0 -> eval([st, w], s2)
        | _ -> eval([st, w], s1)
      esac
    | While (e, s) ->
      case evalExpr(st, e) of
          0 -> [st, w]
        | _ -> eval(eval([st, w], s), While(e,s))
      esac
    | DoWhile (s, e) ->
      case eval([st, w], s) of
        [st1, w1] -> eval([st1, w1], While(e, s))
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
