-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))}
                               | x=lident  {Var (x)}
                               | inbr[s("("), exp, s(")")]);

var exp = memo $ eta expr({[Left, {[s("!!"), fun (l, op, r) {Binop(op, l, r)}]}],
                           [Left, {[s("&&"), fun (l, op, r) {Binop (op, l, r)}]}],

                           [Nona, {[s("=="), fun (l, op, r) {Binop(op, l, r)}],
                                   [s("!="), fun (l, op, r) {Binop(op, l, r)}],
                                   [s("<"),  fun (l, op, r) {Binop(op, l, r)}],
                                   [s("<="), fun (l, op, r) {Binop(op, l, r)}],
                                   [s(">"),  fun (l, op, r) {Binop(op, l, r)}],
                                   [s(">="), fun (l, op, r) {Binop(op, l, r)}]}],

                           [Left, {[s("+"),  fun (l, op, r) {Binop(op, l, r)}],
                                   [s("-"),  fun (l, op, r) {Binop(op, l, r)}]}],

                           [Left, {[s("*"),  fun (l, op, r) {Binop(op, l, r)}],
                                   [s("/"),  fun (l, op, r) {Binop(op, l, r)}],
                                   [s("%"),  fun (l, op, r) {Binop(op, l, r)}]}]}, primary);

var elifStmt = memo $ eta syntax ( e=exp kThen s=stmt                    {If(e, s, Skip)}
                                 | e=exp kThen s1=stmt kElse s2=stmt     {If(e, s1, s2)}
                                 | e=exp kThen s1=stmt kElif s2=elifStmt {If(e, s1, s2)}
                                 );

var simpleStmt = memo $ eta syntax ( kRead x=inbr[s("("), lident, s(")")]          {Read (x)}
                                   | kSkip                                         {Skip}
                                   | kWrite x=inbr[s("("), exp, s(")")]            {Write(x)}
                                   | x=lident s[":="] e=exp                        {Assn(x, e)}
                                   | kIf e=exp kThen s1=stmt  kFi                  {If(e, s1, Skip)}
                                   | kIf e=exp kThen s1=stmt kElse s2=stmt kFi     {If (e, s1, s2)}
                                   | kIf e=exp kThen s1=stmt kElif s2=elifStmt kFi {If(e, s1, s2)}
                                   | kWhile e=exp kDo s=stmt kOd                   {While(e, s)}
                                   | kDo s=stmt kWhile e=exp kOd                   {DoWhile(s, e)}
                                   | kFor s1=simpleStmt s[","] e=exp s[","] s2=simpleStmt
                                     kDo s3=stmt kOd                               {Seq(s1, While(e, Seq(s3, s2)))}
                                   );

var stmt = memo $ eta syntax (simpleStmt
                            | a=simpleStmt  s[";"] b=stmt {Seq(a, b)}
                             );

-- Public top-level parser
public parse = stmt;
