-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
      i : is -> eval (evalInsn (c, i), is)
    | {}     -> c
  esac
}

fun evalInsn([stack, st, w], i) {
  case i of
      READ       -> case readWorld(w) of
        [n, nw] -> [n : stack, st, nw]
      esac
    | WRITE      -> case stack of
      n : ns -> [ns, st, writeWorld (n, w)]
    esac
    | BINOP (op) -> case stack of
      n2 : n1 : ns -> [evalOp(op, n1, n2) : ns, st, w]
    esac
    | LD (x)     -> [(st (x)) : stack, st, w]
    | ST (x)     -> case stack of
      n : ns -> [ns, st <- [x, n], w]
    esac
    | CONST (n)  -> [n : stack, st, w]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (x)            -> {LD (x)}
    | Const (n)          -> {CONST (n)}
    | Binop (op, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (x, e)  -> compileExpr (e) +++ {ST (x)}
    | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
    | Skip         -> {}
    | Read (x)     -> {READ, ST (x)}
    | Write (e)    -> compileExpr (e) +++ {WRITE}
  esac
}