-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, st, w], insns) {
  case insns of
    {} -> c
  | _  -> case evalInsn (env, c, insns) of
            [stack, st, nw, insns] -> eval (env, [stack, st, nw], insns)
          esac
  esac
}

fun evalInsn(env, [stack, st, w], i:insns) {
  case i of
      READ         -> case readWorld(w) of
                        [n, nw] -> [n : stack, st, nw, insns]
                      esac
    | WRITE        -> case stack of
                        n : ns -> [ns, st, writeWorld (n, w), insns]
                      esac
    | BINOP (op)   -> case stack of
                        n2 : n1 : ns -> [evalOp(op, n1, n2) : ns, st, w, insns]
                      esac
    | LD (x)       -> [st (x) : stack, st, w, insns]
    | ST (x)       -> case stack of
                        n : ns -> [ns, st <- [x, n], w, insns]
                      esac
    | CONST (n)    -> [n : stack, st, w, insns]
    | LABEL (_)    -> [stack, st, w, insns]
    | JMP   (l)    -> [stack, st, w, env.fromLabel(l)]
    | CJMP  (c, l) -> case c of
                          "z"  -> case stack of
                                    n : ns -> [ns, st, w, if n == 0 then env.fromLabel(l) else insns fi]
                                  esac
                        | "nz" -> case stack of
                                    n : ns -> [ns, st, w, if n != 0 then env.fromLabel(l) else insns fi]
                                  esac
                      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (x)            -> singletonBuffer $ LD (x)
    | Const (n)          -> singletonBuffer $ CONST (n)
    | Binop (op, e1, e2) -> compileExpr(e1) <+> compileExpr(e2) <+> BINOP(op).singletonBuffer
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile (lab, env, stmt) {
    case stmt of
        Skip           -> [false, env, emptyBuffer ()]
      | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
      | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
      | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
      | Seq   (s1, s2) -> case env.genLabel             of [s2Lab, env]             ->
                          case compile (s2Lab, env, s1) of [s2LabUsed, env, s1Code] ->
                          case compile (lab, env, s2)   of [labUsed, env, s2Code]   ->
                            [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                          esac esac esac
      | If (e, s1, s2) -> case env.genLabel          of [ifLab, env]    ->
                          case compile(lab, env, s1) of [_, env, code1] ->
                          case compile(lab, env, s2) of [_, env, code2] ->
                            [true, env, compileExpr(e) <+ CJMP ("z", ifLab) <+> code1 <+ JMP(lab) <+ LABEL(ifLab) <+> code2]
                          esac esac esac
      | While (e, s)   -> case env.genLabel              of [whileLab, env] ->
                          case compile(whileLab, env, s) of [_, env, code]  ->
                            [true, env, LABEL (whileLab).singletonBuffer <+> compileExpr(e) <+ CJMP("z", lab) <+> code <+ JMP(whileLab)]
                          esac esac
      | DoWhile (s, e) -> case env.genLabel                of [whileLab, env]      ->
                          case env.genLabel                of [endStmtLab, env]    ->
                          case compile(endStmtLab, env, s) of [usedLab, env, code] ->
                            [false, env, LABEL (whileLab).singletonBuffer <+> code <+> label(endStmtLab, usedLab) <+> compileExpr(e) <+ CJMP ("nz", whileLab)]
                          esac esac esac
    esac
  }

  case initCompEnv ().genLabel     of [endLab, env]         ->
  case compile (endLab, env, stmt) of [endLabUsed, _, code] ->
    getBuffer $  code <+> label (endLab, endLabUsed)
  esac esac
}
